{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["TaskItem","task","index","updateTask","removeTask","onChange","e","target","checked","colorScheme","mb","w","flexDir","isChecked","color","alignSelf","text","onClick","bg","pos","right","icon","App","useState","newTask","setNewTask","tasks","setTasks","addNewTask","preventDefault","length","prevState","newTasks","splice","h","ml","mt","mr","fontWeight","fontSize","onSubmit","value","variant","placeholder","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","extendTheme","config","initialColorMode","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAmFMA,EAAW,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,WAC3C,OACE,cAAC,IAAD,CAAUC,SAAU,SAACC,GAAD,OAAOH,EAAWD,EAAOI,EAAEC,OAAOC,UAAUC,YAAY,QAAQC,GAAI,GAAIC,EAAE,OAAOC,QAAQ,MAAMC,UAAWZ,EAAKY,UAAnI,SACE,eAAC,IAAD,CAAMF,EAAE,OAAOC,QAAQ,MAAvB,UACE,cAAC,IAAD,CAAME,MAAM,QAAQC,UAAU,SAA9B,SAAwCd,EAAKe,OAC7C,cAAC,IAAD,CAAYC,QAAS,kBAAMb,EAAWF,IAAQgB,GAAG,UAAUC,IAAI,WAAWC,MAAO,EAAGC,KAAM,cAAC,IAAD,YAMnFC,EA9EH,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACTC,EADS,KACAC,EADA,OAGUF,mBAAS,IAHnB,mBAGTG,EAHS,KAGFC,EAHE,KAMVC,EAAa,SAAAtB,GACjBA,EAAEuB,iBAEEL,EAAQM,OAAS,IACnBH,GAAS,SAAAI,GAAS,4BACbA,GADa,CAEhB,CAAEf,KAAMQ,EAASX,WAAW,QAE9BY,EAAW,MAITtB,EAAa,SAACD,EAAOM,GACzB,IAAIwB,EAAQ,YAAON,GACnBM,EAAS9B,GAAOW,UAAYL,EAC5BmB,EAASK,IAGL5B,EAAa,SAAAF,GACjB,IAAM8B,EAAQ,YAAON,GACrBM,EAASC,OAAO/B,EAAO,GACvByB,EAASK,IAGX,OACE,mCACE,cAAC,IAAD,CAAMrB,EAAE,OAAOuB,EAAE,QAAjB,SACE,eAAC,IAAD,CAAMvB,EAAE,OAAOC,QAAQ,SAASuB,GAAG,MAAMC,GAAG,KAAKC,GAAG,MAAMvB,MAAM,QAAhE,UACE,cAAC,IAAD,CAAMwB,WAAW,MAAMC,SAAU,GAAjC,mBACA,sBAAMC,SAAUZ,EAAhB,SACE,eAAC,IAAD,CAAMQ,GAAG,KAAT,UACE,cAAC,IAAD,CAAOK,MAAOjB,EAASnB,SAAU,SAAAC,GAAC,OAAImB,EAAWnB,EAAEC,OAAOkC,QAAQC,QAAQ,UAAUC,YAAY,WAAWhC,EAAE,QAC7G,cAAC,IAAD,CAAQM,QAASW,EAAYO,GAAI,EAAGjB,GAAG,WAAvC,2BAGJ,eAAC,IAAD,CAAMwB,QAAQ,OAAON,GAAG,KAAKzB,EAAE,OAA/B,UACE,eAAC,IAAD,WACE,cAAC,IAAD,+BACA,cAAC,IAAD,iCAEF,eAAC,IAAD,WACE,cAAC,IAAD,UACGe,EAAMkB,KAAI,SAAC3C,EAAMC,GAAP,OACRD,EAAKY,UACF,KADc,cAAC,EAAD,CAAUT,WAAYA,EAAYF,MAAOA,EAAOC,WAAYA,EAAwBF,KAAMA,GAAbC,QAInG,cAAC,IAAD,UACGwB,EAAMkB,KAAI,SAAC3C,EAAMC,GAAP,OACTD,EAAKY,UAAY,cAAC,EAAD,CAAUT,WAAYA,EAAYF,MAAOA,EAAOC,WAAYA,EAAwBF,KAAMA,GAAbC,GAC1F,wBC5DP2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,gBCGRQ,EAAQC,YAAY,CAAEC,OAJb,CACbC,iBAAkB,UAKpBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAAC,IAAD,CAAgBN,MAAOA,EAAvB,UACE,cAAC,IAAD,CAAiBG,iBAAkBH,EAAME,OAAOC,mBAChD,cAAC,EAAD,SAGJI,SAASC,eAAe,SAM1BjB,M","file":"static/js/main.5129a99f.chunk.js","sourcesContent":["import { DeleteIcon } from '@chakra-ui/icons'\nimport {\n  Flex,\n  Text,\n  Input,\n  Button,\n  Tabs,\n  TabList,\n  Tab,\n  TabPanels,\n  TabPanel,\n  Checkbox,\n  IconButton\n} from '@chakra-ui/react'\nimport { useState } from 'react'\n\nconst App = () => {\n  const [newTask, setNewTask] = useState('')\n\n  const [tasks, setTasks] = useState([])\n\n\n  const addNewTask = e => {\n    e.preventDefault()\n\n    if (newTask.length > 0) {\n      setTasks(prevState => [\n        ...prevState,\n        { text: newTask, isChecked: false }\n      ])\n      setNewTask('')\n    }\n  }\n\n  const updateTask = (index, checked) => {\n    let newTasks = [...tasks]\n    newTasks[index].isChecked = checked\n    setTasks(newTasks)\n  }\n\n  const removeTask = index => {\n    const newTasks = [...tasks]\n    newTasks.splice(index, 1)\n    setTasks(newTasks)\n  }\n\n  return (\n    <>\n      <Flex w='100%' h='100vh'>\n        <Flex w='100%' flexDir='column' ml='20%' mt='5%' mr='20%' color='white'>\n          <Text fontWeight='700' fontSize={30}>Tasks</Text>\n          <form onSubmit={addNewTask}>\n            <Flex mt='2%'>\n              <Input value={newTask} onChange={e => setNewTask(e.target.value)} variant='flushed' placeholder='Add task' w='50%' />\n              <Button onClick={addNewTask} ml={5} bg='blue.400'>Add Task</Button>\n            </Flex>\n          </form>\n          <Tabs variant='line' mt='2%' w='100%'>\n            <TabList>\n              <Tab>Incomplete Tasks</Tab>\n              <Tab>Completed Tasks</Tab>\n            </TabList>\n            <TabPanels>\n              <TabPanel>\n                {tasks.map((task, index) => (\n                  !task.isChecked ? <TaskItem removeTask={removeTask} index={index} updateTask={updateTask} key={index} task={task} />\n                    : null\n                ))}\n              </TabPanel>\n              <TabPanel>\n                {tasks.map((task, index) => (\n                  task.isChecked ? <TaskItem removeTask={removeTask} index={index} updateTask={updateTask} key={index} task={task} />\n                    : null\n                ))}\n              </TabPanel>\n            </TabPanels>\n          </Tabs>\n        </Flex>\n      </Flex>\n    </>\n  )\n}\n\nconst TaskItem = ({ task, index, updateTask, removeTask }) => {\n  return (\n    <Checkbox onChange={(e) => updateTask(index, e.target.checked)} colorScheme=\"green\" mb={10} w='100%' flexDir='row' isChecked={task.isChecked}>\n      <Flex w='100%' flexDir='row'>\n        <Text color='white' alignSelf='center'>{task.text}</Text>\n        <IconButton onClick={() => removeTask(index)} bg='red.600' pos='absolute' right={0} icon={<DeleteIcon />} />\n      </Flex>\n    </Checkbox>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider, extendTheme, ColorModeScript } from \"@chakra-ui/react\"\n\nconst config = {\n  initialColorMode: \"dark\",\n}\n\nconst theme = extendTheme({ config })\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}